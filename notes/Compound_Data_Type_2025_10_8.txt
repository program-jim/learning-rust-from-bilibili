// Compound Data Types
// Oct 8, 2025

// Array, tuple, slice, and strings (slice strings)

fn main() {
	// Array
	let numbers: [i32; 5] = [1, 2, 3, 4, 5];
    //let nub: [i32; 2] = [6, 4];
    let fruits: [&str; 3] = ["apples", "oranges", "bananas"];
    //let mix = [1, 2, "test_string", true];

	println!("Number array: {:?}", numbers);
    //println!("Mix array: {:?}", mix);
    println!("Fruits 1: {}", fruits[0]);
    println!("Fruits 2: {}", fruits[1]);
    println!("Fruits 3: {}", fruits[2]);

    //////////////////////////////////////////

    // Tuples
    let human:(String, i32, bool) = ("Alice".to_string(), 16, false);
    println!("Human: {:?}", human);
    let my_mix_tuple = ("Kotlin", 11, true, [1, 2, 3, 4, 5]);
    println!("My Mix tuple: {:?}", my_mix_tuple);

    //////////////////////////////////////////

    // Slices
    // [1, 2, 3, 4, 5]
    let number_slices:&[i32; 5] = &[1, 2, 3, 4, 5];
    println!("Number slices: {:?}", number_slices);

    let animal_slices:&[&str] = &["Lion", "Crocodile", "Dog"];
    println!("Animal Slices: {:?}", animal_slices);

    let book_slices:&[String] = &["Harry Potter".to_string(), 
        "IT".to_string(), 
        "Chinese History".to_string()];

    println!("Book Slices: {:?}", book_slices);

    //////////////////////////////////////////

    // Strings VS String Slices (&str)
    // Strings [ growable, mutable, owned string type ]
    let mut stone_cold: String = String::from("Hell, ");
    //println!("Stone Cold Says: {}", stone_cold);
    stone_cold.push_str("Yeah!");
    println!("Stone Cold says: {}", stone_cold);

    // B- &str (String Slice)
    let string: String = String::from("Hello, World");
    let slice: &str = &string[0..5];
    println!("Slice Value: {}", slice);
}

//fn print() {
//    println!("SLICE: {}", slice);
//}
